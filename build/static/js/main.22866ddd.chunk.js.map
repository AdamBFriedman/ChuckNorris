{"version":3,"sources":["components/NavBar.js","components/Octagon.js","components/Sidekicks.js","components/ForceOfOne.js","components/MissingInAction.js","components/LogansWar.js","components/Hellbound.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","Component","Octagon","toggle","findDOMNode","_this","refs","$","id","ref","src","title","type","onClick","this","Sidekicks","ForceOfOne","MissingInAction","LogansWar","Hellbound","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bgColor","fact","getFact","bind","assertThisInitialized","_this2","axios","get","then","response","setState","data","value","catch","error","console","log","NavBar_NavBar","Sidekicks_Sidekicks","Octagon_Octagon","ForceOfOne_ForceOfOne","MissingInAction_MissingInAction","LogansWar_LogansWar","Hellbound_Hellbound","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22866ddd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class NavBar extends Component {\n  render() {\n    return (\n    <div>\n      <nav className=\"navbar fixed-top\">\n      <a\n      className=\"navbarText\"\n      >\n        Facts about the legendary <span>Chuck Norris</span>\n      </a>\n      </nav>\n    </div>\n    );\n  } \n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { findDOMNode } from 'react-dom';\n\nexport default class Octagon extends Component {\n\ntoggle = () => {\n    let toggle = findDOMNode(this.refs.toggle);\n    $(toggle).toggle();\n}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n                <iframe id=\"video\" ref=\"toggle\" src=\"https://www.youtube.com/embed/jNgmxKRKNaU\" \n                title=\"The Octagon\"></iframe>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn octagon\"\n\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t>\n\t\t\t\t\tThe Octagon\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { findDOMNode } from 'react-dom';\n\nexport default class Sidekicks extends Component {\n\ntoggle = () => {\n    let toggle = findDOMNode(this.refs.toggle);\n    $(toggle).toggle();\n}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n                <iframe id=\"video\" ref=\"toggle\" src=\"https://www.youtube.com/embed/llm_Loqq1Qs\" \n                title=\"Sidekicks\"></iframe>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn sidekicks\"\n\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t>\n\t\t\t\t\tSidekicks\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { findDOMNode } from 'react-dom';\n\nexport default class ForceOfOne extends Component {\n\ntoggle = () => {\n    let toggle = findDOMNode(this.refs.toggle);\n    $(toggle).toggle();\n}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n                <iframe id=\"video\" ref=\"toggle\" src=\"https://www.youtube.com/embed/1nJrBv2okIg\" \n                title=\"Force of One\"></iframe>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn forceOfOne\"\n\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t>\n\t\t\t\t\tForce of One\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { findDOMNode } from 'react-dom';\n\nexport default class MissingInAction extends Component {\n\ntoggle = () => {\n    let toggle = findDOMNode(this.refs.toggle);\n    $(toggle).toggle();\n}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n                <iframe id=\"video\" ref=\"toggle\" src=\"https://www.youtube.com/embed/XmtqnX9-3-w\" \n                title=\"Missing in Action\"></iframe>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn missingInAction\"\n\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t>\n\t\t\t\t\tMissing in Action\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { findDOMNode } from 'react-dom';\n\nexport default class LogansWar extends Component {\n\ntoggle = () => {\n    let toggle = findDOMNode(this.refs.toggle);\n    $(toggle).toggle();\n}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n                <iframe id=\"video\" ref=\"toggle\" src=\"https://www.youtube.com/embed/9mmwlDt97wE\" \n                title=\"Logan's War\"></iframe>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn logansWar\"\n\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t>\n\t\t\t\t\tLogan's War\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport { findDOMNode } from 'react-dom';\n\nexport default class Hellbound extends Component {\n\ntoggle = () => {\n    let toggle = findDOMNode(this.refs.toggle);\n    $(toggle).toggle();\n}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n                <iframe id=\"video\" ref=\"toggle\" src=\"https://www.youtube.com/embed/RKBDGSeMhnA\" \n                title=\"Hellbound\"></iframe>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"btn hellbound\"\n\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t>\n\t\t\t\t\tHellbound\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport NavBar from './components/NavBar';\nimport Octagon from './components/Octagon';\nimport Sidekicks from './components/Sidekicks';\nimport ForceOfOne from './components/ForceOfOne';\nimport MissingInAction from './components/MissingInAction';\nimport LogansWar from './components/LogansWar';\nimport Hellbound from './components/Hellbound';\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColor: '',\n      fact: 'Chuck Norris\\' tears cure cancer. Too bad he has never cried. Ever.'\n    };\n    \n    this.getFact = this.getFact.bind(this);\n  }\n\n\n  \n  getFact() {\n    axios.get('https://api.chucknorris.io/jokes/random')\n      .then(response => {\n      this.setState({fact: response.data.value});\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        <NavBar />\n        <h1><span>Chuck Norris</span> Facts</h1>\n        <h3>{'\"' + this.state.fact + '\"'}</h3>\n        <button type=\"button\" \n          className=\"btn btnFact\"\n          onClick={this.getFact}>\n          Next Chuck Fact!\n        </button>\n        <h2>Watch some classics!</h2>\n        <div className=\"gridContainer\">\n        <Sidekicks />\n        <Octagon />\n        <ForceOfOne />\n        <MissingInAction />\n        <LogansWar />\n        <Hellbound />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}